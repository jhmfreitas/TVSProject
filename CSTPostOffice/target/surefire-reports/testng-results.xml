<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="25" passed="25">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="106" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="106" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
      <class name="ap.TestCalculator">
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="14" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDivide(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivide" duration-ms="2" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivide -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="1" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDivide(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivide" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivide -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="1" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="1" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDivide(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivide" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivide -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDivide(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivide" duration-ms="1" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivide -->
        <test-method status="PASS" signature="testDivide(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivide" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivide -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="1" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDivideWhenDivisorIsZero(java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivideWhenDivisorIsZero" duration-ms="1" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideInvalidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivideWhenDivisorIsZero -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDivideWhenDivisorIsZero(java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivideWhenDivisorIsZero" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideInvalidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivideWhenDivisorIsZero -->
        <test-method status="PASS" signature="testDivideWhenDivisorIsZero(java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivideWhenDivisorIsZero" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideInvalidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivideWhenDivisorIsZero -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDivideWhenDivisorIsZero(java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivideWhenDivisorIsZero" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeDivideInvalidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivideWhenDivisorIsZero -->
        <test-method status="PASS" signature="testDivideWhenDivisorIsZero2()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testDivideWhenDivisorIsZero2" duration-ms="43" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivideWhenDivisorIsZero2 -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testSum(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testSum" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeSumTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSum -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testSum(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testSum" duration-ms="1" started-at="2020-03-01T18:45:07Z" data-provider="computeSumTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSum -->
        <test-method status="PASS" signature="testSum(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testSum" duration-ms="1" started-at="2020-03-01T18:45:07Z" data-provider="computeSumTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSum -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testSum(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testSum" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeSumTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSum -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="2" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testSum(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testSum" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeSumTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSum -->
        <test-method status="PASS" signature="testSum(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testSum" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeSumTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSum -->
        <test-method status="PASS" signature="testSum(java.lang.Integer, java.lang.Integer, java.lang.Integer)[pri:0, instance:ap.TestCalculator@1cd072a9]" name="testSum" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeSumTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSum -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:ap.TestCalculator@1cd072a9]" name="setUp" is-config="true" duration-ms="0" started-at="2020-03-01T18:45:07Z" finished-at="2020-03-01T18:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- ap.TestCalculator -->
      <class name="ap.TestCalculatorConstructor">
        <test-method status="PASS" signature="testInvalidConstructor(java.lang.String)[pri:0, instance:ap.TestCalculatorConstructor@7c75222b]" name="testInvalidConstructor" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeConstructorInvalidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[no name]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: no nameat ap.Calculator.<init>(Calculator.java:22)at ap.TestCalculatorConstructor.testInvalidConstructor(TestCalculatorConstructor.java:40)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)at org.testng.internal.Invoker.invokeMethod(Invoker.java:571)at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:707)at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:979)at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)at org.testng.TestRunner.privateRun(TestRunner.java:648)at org.testng.TestRunner.run(TestRunner.java:505)at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)at org.testng.SuiteRunner.run(SuiteRunner.java:364)at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)at org.testng.TestNG.runSuites(TestNG.java:1028)at org.testng.TestNG.run(TestNG.java:996)at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidConstructor -->
        <test-method status="PASS" signature="testInvalidConstructor(java.lang.String)[pri:0, instance:ap.TestCalculatorConstructor@7c75222b]" name="testInvalidConstructor" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeConstructorInvalidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Calcul]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[no name]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: no nameat ap.Calculator.<init>(Calculator.java:22)at ap.TestCalculatorConstructor.testInvalidConstructor(TestCalculatorConstructor.java:40)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)at org.testng.internal.Invoker.invokeMethod(Invoker.java:571)at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:707)at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:979)at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)at org.testng.TestRunner.privateRun(TestRunner.java:648)at org.testng.TestRunner.run(TestRunner.java:505)at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)at org.testng.SuiteRunner.run(SuiteRunner.java:364)at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)at org.testng.TestNG.runSuites(TestNG.java:1028)at org.testng.TestNG.run(TestNG.java:996)at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidConstructor -->
        <test-method status="PASS" signature="testInvalidConstructor(java.lang.String)[pri:0, instance:ap.TestCalculatorConstructor@7c75222b]" name="testInvalidConstructor" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeConstructorInvalidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[N]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[no name]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: no nameat ap.Calculator.<init>(Calculator.java:22)at ap.TestCalculatorConstructor.testInvalidConstructor(TestCalculatorConstructor.java:40)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)at org.testng.internal.Invoker.invokeMethod(Invoker.java:571)at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:707)at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:979)at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)at org.testng.TestRunner.privateRun(TestRunner.java:648)at org.testng.TestRunner.run(TestRunner.java:505)at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)at org.testng.SuiteRunner.run(SuiteRunner.java:364)at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)at org.testng.TestNG.runSuites(TestNG.java:1028)at org.testng.TestNG.run(TestNG.java:996)at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidConstructor -->
        <test-method status="PASS" signature="testInvalidConstructor(java.lang.String)[pri:0, instance:ap.TestCalculatorConstructor@7c75222b]" name="testInvalidConstructor" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeConstructorInvalidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[no name]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: no nameat ap.Calculator.<init>(Calculator.java:22)at ap.TestCalculatorConstructor.testInvalidConstructor(TestCalculatorConstructor.java:40)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)at org.testng.internal.Invoker.invokeMethod(Invoker.java:571)at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:707)at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:979)at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)at org.testng.TestRunner.privateRun(TestRunner.java:648)at org.testng.TestRunner.run(TestRunner.java:505)at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)at org.testng.SuiteRunner.run(SuiteRunner.java:364)at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)at org.testng.TestNG.runSuites(TestNG.java:1028)at org.testng.TestNG.run(TestNG.java:996)at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidConstructor -->
        <test-method status="PASS" signature="testValidConstructor(java.lang.String)[pri:0, instance:ap.TestCalculatorConstructor@7c75222b]" name="testValidConstructor" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeConstructorValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Nio]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidConstructor -->
        <test-method status="PASS" signature="testValidConstructor(java.lang.String)[pri:0, instance:ap.TestCalculatorConstructor@7c75222b]" name="testValidConstructor" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeConstructorValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Nioca]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidConstructor -->
        <test-method status="PASS" signature="testValidConstructor(java.lang.String)[pri:0, instance:ap.TestCalculatorConstructor@7c75222b]" name="testValidConstructor" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeConstructorValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Nome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidConstructor -->
        <test-method status="PASS" signature="testValidConstructor(java.lang.String)[pri:0, instance:ap.TestCalculatorConstructor@7c75222b]" name="testValidConstructor" duration-ms="0" started-at="2020-03-01T18:45:07Z" data-provider="computeConstructorValidTestData" finished-at="2020-03-01T18:45:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ca]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidConstructor -->
      </class> <!-- ap.TestCalculatorConstructor -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
